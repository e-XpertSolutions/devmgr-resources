// Inspired from:
//    https://github.com/irgoncalves/f5-waf-enforce-sig-CVE-2021-44228

var f5     = require('devmgr/f5');
var logger = require('logger');
var files  = require('devmgr/files');
var device = require('devmgr/device');

// List of signatures to be enforced. This list comes from the F5 KB:
//    https://support.f5.com/csp/article/K59329043#proc1
var SIGNATURES = ['200104768', '200104769', '200004450', '200004451','200004474','200104770','200104771','200104772','200104773'];

// Entrypoint for the script execution.
function execute(env) {
	var deviceList = device.resolveTag(env.target);
    if (deviceList == null || deviceList.length === 0) {
        deviceList = [env.target];
    }
    for (var i = 0; i < deviceList.length; i++) {
        var deviceName = deviceList[i];
        var conn = new f5.Client(deviceName);
        
        // Make sure the ASM module is provisionned.
        if (!isAsmProvisionned(conn)) {
            continue;
        }
        
        // Check that the device is the active member of the cluster.
        if (!isActive(conn, deviceName)) {
            logger.notice('[asm-signtatures-cve-log4j] skipping non-active device ' + deviceName);
            continue;
        }
        processPolicies(conn);
    }
}

// processPolicies retrieves all ASM policies and enforces their signatures and
// finally applies the changes.
function processPolicies(conn) {
    var resp = conn.restCall('GET', '/mgmt/tm/asm/policies/?$select=id,name,enforcementMode,type');
    
    var jsonData = JSON.parse(resp.body);
    for (var i = 0; i < jsonData['items'].length; i++) {
        var item = jsonData['items'][i];
        if (item.type === 'parent') {
            continue;
        }
        if (item.enforcementMode === 'blocking') {
            enforceSignatures(conn, item.id);
            applySignatures(conn, item.id);
        }
    }
}

function enforceSignatures(conn, policyId) {
    var jsonData = { performStaging: false };
    var jsonStr = JSON.stringify(jsonData);
    
    var sigsStr = SIGNATURES.join("','");
    var uri = '/mgmt/tm/asm/policies/' + policyId + '/signatures?$expand=signatureReference&$filter=inPolicy+eq+true+and+signature/signatureId+in+(\'' + sigsStr + '\')';
    
    var resp = conn.restCall('PATCH', uri, jsonStr);
    if (resp.status >= 400) {
        logger.error('[asm-signtatures-cve-log4j] failed to enforce signatures for policy ' + policyId + ': [' + resp.status + '] => ' + resp.body);
        return;
    }
    
    logger.notice('[asm-signtatures-cve-log4j] signatures successfully enforced for policy ' + policyId);
}

function applySignatures(conn, policyId) {
    var jsonData = {
        policyReference: {
            link: 'https://localhost/mgmt/tm/asm/policies/' + policyId
        }
    };
    var jsonStr = JSON.stringify(jsonData);
    
    var resp = conn.restCall('POST', '/mgmt/tm/asm/tasks/apply-policy', jsonStr);
    if (resp.status >= 400) {
        logger.error('[asm-signtatures-cve-log4j] failed to apply signatures for policy ' + policyId + ': [' + resp.status + '] => ' + resp.body);
        return;
    }
    
    logger.notice('[asm-signtatures-cve-log4j] signatures successfully applied for policy ' + policyId);
}

// isActive reports wheather the provided device is the active member of the
// cluster.
function isActive(conn, deviceName) {
    var resp = conn.restCall('GET', '/mgmt/tm/sys/global-settings');
    if (resp.status >= 400) {
        logger.error('[asm-signtatures-cve-log4j] cannot retrieve hostname for device' + deviceName + ': [' + resp.status + '] => ' + resp.body);
        return false;
    }
    
    var globalSettingsData = JSON.parse(resp.body);
    var hostname = globalSettingsData.hostname;
    
    resp = conn.restCall('GET', '/mgmt/tm/cm/traffic-group/traffic-group-1/stats?$select=deviceName,failoverState');
    if (resp.status >= 400) {
        logger.error('[asm-signtatures-cve-log4j] cannot retrieve failover state for device' + deviceName + ': [' + resp.status + '] => ' + resp.body);
        return false;
    }
    
    logger.notice('[asm-signtatures-cve-log4j] device ' + deviceName + ' output: ' + resp.body);
    
    var stats = JSON.parse(resp.body);
    for (var k in stats.entries) {
        var entry = stats.entries[k];
        
        var nestedStats = entry.nestedStats;
        var name        = nestedStats.entries.deviceName.description;
        var state       = nestedStats.entries.failoverState.description;
        
        if (name.indexOf(hostname) !== -1 && state === 'active') {
            logger.notice('[asm-signtatures-cve-log4j] device ' + deviceName + ' is active');
            return true
        }
    }
    
    logger.notice('[asm-signtatures-cve-log4j] device ' + deviceName + ' is not active');
    
    return false;
}

// isAsmProvisionned reports whether the ASM module is provisionned.
function isAsmProvisionned(conn) {
    var resp = conn.restCall('GET', '/mgmt/tm/asm');
    if (resp.status >= 400) {
        logger.error('[asm-signtatures-cve-log4j] ASM module is not provisionned on device ' + deviceName + ': [' + resp.status + '] => ' + resp.body);
        return false;
    }
    return true;
}
