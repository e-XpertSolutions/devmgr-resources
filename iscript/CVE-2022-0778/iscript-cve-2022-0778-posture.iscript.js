var f5     = require('devmgr/f5');
var device = require('devmgr/device');
var files  = require('devmgr/files');
var logger = require('logger');
var csv    = require('csv');

var LOG_PREFIX = '[iscript-cve-2022-0778-posture] ';

function execute(env) {
    if (!env.target) {
        logger.error(LOG_PREFIX + 'missing target device');
        return;
    }
    var target = env.target;
    
    var listFilter = 'Only Vulnerable';
    if (env.vuln_list_filter) {
        listFilter = env.vuln_list_filter;
    }

    var f5Devices = device.resolveTag(target);
    if (!f5Devices || f5Devices.length === 0) {
        f5Devices = [target];
    }
    
    var reportName = 'report-cve-2022-0778-' + target;
    if (env.report_name) {
        reportName = env.report_name;
    }
    
    var report = csv.create();
    var csvHeader = ['Name', 'Partition', 'Device', 'Description', 'Destination', 'Vulnerable?'];
    report.addRecord(csvHeader);
    
    for (var i = 0; i < f5Devices.length; i++) {
        var deviceName = f5Devices[i];
        var client = new f5.Client(deviceName);
        if (!client) {
            logger.error(LOG_PREFIX + 'cannot get client for device ' + deviceName);
            continue;
        }
        
        logger.notice(LOG_PREFIX + 'processing device ' + deviceName);
        processDevice(client, deviceName, report, listFilter);
        logger.notice(LOG_PREFIX + 'done processing device ' + deviceName);
    }
    
    return files.writeAsText(reportName, '', reportName + '.csv', report.toString());
}

function processDevice(client, deviceName, report, listFilter) {
    var vulnList = buildVulnerableProfilesList(client);
    if (!vulnList && listFilter !== 'All') {
        return [];
    }
    
    var resp = client.restCall('GET', '/mgmt/tm/ltm/virtual?expandSubcollections=true');
    if (resp.status !== 200) {
        logger.error(LOG_PREFIX + 'cannot retrieve list of virtual servers: ' + JSON.stringify(resp));
        return;
    }
    
    var data = JSON.parse(resp.body);
    
    for (var i = 0; i < data.items.length; i++) {
        var item = data.items[i];
        if (!item.profilesReference || !item.profilesReference.items) {
            continue;
        }
        var isVuln = false;
        for (var j = 0; j < item.profilesReference.items.length; j++) {
            var profile = item.profilesReference.items[j];
            if (!profile.nameReference || !profile.nameReference.link) {
                continue;
            }
            if (!profile.nameReference.link.indexOf('/client-ssl/') === -1) {
                continue;
            }
            if (vulnList.indexOf(profile.fullPath) !== -1) {
                isVuln = true;
                break;
            }
        }
        if (isVuln || listFilter === 'All') {
            report.addRecord([
                item.name,
                item.partition,
                deviceName.replace('.labo.e-xpertsolutions.lan', ''),
                item.description || '',
                item.destination.replace('/Common/', ''),
                isVuln ? 'yes' : 'no'
            ]);
            if (isVuln) {
                logger.notice(LOG_PREFIX + 'virtual server ' + item.fullPath + ' on ' + deviceName + ' is vulnerable');
            }
        }
    }
}

function buildVulnerableProfilesList(client) {
    var resp = client.restCall('GET', '/mgmt/tm/ltm/profile/client-ssl');
    if (resp.status !== 200) {
        logger.error(LOG_PREFIX + 'cannot retrieve list of client-ssl profiles: ' + JSON.stringify(resp));
        return null;
    }
    
    var data = JSON.parse(resp.body);
    
    var vulnList = [];
    for (var i = 0; i < data.items.length; i++) {
        var item = data.items[i];
        if (item.peerCertMode === 'require' || item.peerCertMode === 'request') {
            vulnList.push(item.fullPath);
        }
    }
    return vulnList.join(',');
}
